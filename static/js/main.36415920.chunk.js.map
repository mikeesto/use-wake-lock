{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["useWakeLock","useState","wakeLock","setWakeLock","wakeLockActive","setWakeLockActive","wakeLockError","setWakeLockError","timer","setTimer","useEffect","clearTimeout","cleanup","toggleWakeLock","a","duration","Error","window","tempWakeLock","tempTimer","setTimeout","console","App","name","type","checked","onChange","onClick","ReactDOM","render","document","getElementById"],"mappings":"myCAEaA,EAAc,WAAM,QACCC,mBADD,SACxBC,EADwB,KACdC,EADc,SAEaF,oBAFb,MAExBG,EAFwB,KAERC,EAFQ,SAGWJ,mBAHX,OAGxBK,EAHwB,KAGTC,EAHS,SAILN,mBAJK,SAIxBO,EAJwB,KAIjBC,EAJiB,KAM/BC,qBAAU,WACR,OAAO,kBAAMF,GAASG,aAAf,MACN,CAFHD,IAIA,IAAME,EAAU,WACdT,QACAE,MACAE,OAkCF,MAAO,CAAEM,eA/BW,e,EAAA,G,EAAA,UAAG,4CAAAC,EAAA,2EAAOC,EAAP,wDAEmBC,MAFnB,mFAOUC,kCAPV,iBAOXC,EAPW,OASjB,IAAIH,IACII,EAAYC,YAAW,WAC3BF,YACAN,MAHgB,GAKlBH,MAGFN,KACAE,MACAE,MAnBiB,kDAqBjBA,EAAiB,GAAD,OAAI,KAAJ,kBAAiB,KAAjCA,UACAc,wBAAiB,KAAjBA,kBAA8B,KAA9BA,UAtBiB,gCA0BnBnB,YACAU,IA3BmB,yD,+KAAH,qDA+BKR,eAAlB,EAAkCE,kBCtB5BgB,MAxBH,KAAO,MAAD,EAC0CtB,IAAlDa,EADQ,EACRA,eAAgBT,EADR,EACQA,eAAgBE,EADxB,EACwBA,cACxC,OACE,oCACE,oDACA,yDACA,2BACEiB,KAAK,WACLC,KAAK,WACLC,QAASrB,EACTsB,SAAU,IAAMb,MAElB,8BAAOT,EAAiB,KAAO,OAC/B,kCAAQE,GACR,2IAIA,4BAAQqB,QAAS,IAAMd,EAAe,MAAtC,qBACA,8BAAOT,EAAiB,MAAQ,QAChC,kCAAQE,KCjBdsB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.36415920.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\nexport const useWakeLock = () => {\n  const [wakeLock, setWakeLock] = useState(null);\n  const [wakeLockActive, setWakeLockActive] = useState(false);\n  const [wakeLockError, setWakeLockError] = useState(\"\");\n  const [timer, setTimer] = useState(null);\n\n  useEffect(() => {\n    return () => timer && clearTimeout(timer);\n  }, [timer]);\n\n  const cleanup = () => {\n    setWakeLock(null);\n    setWakeLockActive(false);\n    setWakeLockError(\"\");\n  };\n\n  const toggleWakeLock = async (duration = 0) => {\n    // Check if duration is a number\n    if (typeof duration !== \"number\") throw Error(\"Duration must be a number\");\n\n    if (!wakeLockActive) {\n      try {\n        // Set wake lock\n        const tempWakeLock = await window.navigator.wakeLock.request(\"screen\");\n\n        if (duration !== 0) {\n          const tempTimer = setTimeout(() => {\n            tempWakeLock.release();\n            cleanup();\n          }, duration);\n          setTimer(tempTimer);\n        }\n\n        setWakeLock(tempWakeLock);\n        setWakeLockActive(true);\n        setWakeLockError(\"\");\n      } catch (err) {\n        setWakeLockError(`${err.name}, ${err.message}`);\n        console.error(`${err.name}, ${err.message}`);\n      }\n    } else {\n      // Release wake lock\n      wakeLock.release();\n      cleanup();\n    }\n  };\n\n  return { toggleWakeLock, wakeLockActive, wakeLockError };\n};\n","import React from \"react\";\nimport { useWakeLock } from \"use-wake-lock\";\n\nconst App = () => {\n  const { toggleWakeLock, wakeLockActive, wakeLockError } = useWakeLock();\n  return (\n    <>\n      <h2>useWakeLock examples</h2>\n      <h4>Toggle wake lock manually</h4>\n      <input\n        name=\"wakelock\"\n        type=\"checkbox\"\n        checked={wakeLockActive}\n        onChange={() => toggleWakeLock()}\n      />\n      <span>{wakeLockActive ? \"on\" : \"off\"}</span>\n      <span> {wakeLockError}</span>\n      <h4>\n        Click to turn wake lock on. After a set period (in this example - 5\n        seconds) the wake lock will be released\n      </h4>\n      <button onClick={() => toggleWakeLock(5000)}>Turn wake lock on</button>\n      <span>{wakeLockActive ? \" on\" : \" off\"}</span>\n      <span> {wakeLockError}</span>\n    </>\n  );\n};\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}